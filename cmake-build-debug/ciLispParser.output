Grammar

    0 $accept: program $end

    1 program: s_expr EOL

    2 s_expr: number
    3       | SYMBOL
    4       | f_expr
    5       | LPAREN let_section s_expr RPAREN
    6       | LPAREN COND s_expr s_expr s_expr RPAREN
    7       | QUIT
    8       | error

    9 number: INT
   10       | DOUBLE

   11 let_section: LPAREN let_list RPAREN

   12 let_list: LET let_elem
   13         | let_list let_elem

   14 let_elem: LPAREN type SYMBOL s_expr RPAREN
   15         | LPAREN type SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

   16 type: INT_T
   17     | DOUBLE_T
   18     | %empty

   19 f_expr: LPAREN FUNC s_expr_list RPAREN
   20       | LPAREN FUNC RPAREN
   21       | LPAREN SYMBOL s_expr_list RPAREN

   22 s_expr_list: s_expr s_expr_list
   23            | s_expr

   24 arg_list: SYMBOL arg_list
   25         | SYMBOL


Terminals, with rules where they appear

$end (0) 0
error (256) 8
FUNC (258) 19 20
SYMBOL (259) 3 14 15 21 24 25
INT (260) 9
DOUBLE (261) 10
INT_T (262) 16
DOUBLE_T (263) 17
LET (264) 12
LPAREN (265) 5 6 11 14 15 19 20 21
RPAREN (266) 5 6 11 14 15 19 20 21
EOL (267) 1
QUIT (268) 7
COND (269) 6
LAMBDA (270) 15


Nonterminals, with rules where they appear

$accept (16)
    on left: 0
program (17)
    on left: 1, on right: 0
s_expr (18)
    on left: 2 3 4 5 6 7 8, on right: 1 5 6 14 15 22 23
number (19)
    on left: 9 10, on right: 2
let_section (20)
    on left: 11, on right: 5
let_list (21)
    on left: 12 13, on right: 11 13
let_elem (22)
    on left: 14 15, on right: 12 13
type (23)
    on left: 16 17 18, on right: 14 15
f_expr (24)
    on left: 19 20 21, on right: 4
s_expr_list (25)
    on left: 22 23, on right: 19 21 22
arg_list (26)
    on left: 24 25, on right: 15 24


State 0

    0 $accept: . program $end

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    program  go to state 7
    s_expr   go to state 8
    number   go to state 9
    f_expr   go to state 10


State 1

    8 s_expr: error .

    $default  reduce using rule 8 (s_expr)


State 2

    3 s_expr: SYMBOL .

    $default  reduce using rule 3 (s_expr)


State 3

    9 number: INT .

    $default  reduce using rule 9 (number)


State 4

   10 number: DOUBLE .

    $default  reduce using rule 10 (number)


State 5

    5 s_expr: LPAREN . let_section s_expr RPAREN
    6       | LPAREN . COND s_expr s_expr s_expr RPAREN
   19 f_expr: LPAREN . FUNC s_expr_list RPAREN
   20       | LPAREN . FUNC RPAREN
   21       | LPAREN . SYMBOL s_expr_list RPAREN

    FUNC    shift, and go to state 11
    SYMBOL  shift, and go to state 12
    LPAREN  shift, and go to state 13
    COND    shift, and go to state 14

    let_section  go to state 15


State 6

    7 s_expr: QUIT .

    $default  reduce using rule 7 (s_expr)


State 7

    0 $accept: program . $end

    $end  shift, and go to state 16


State 8

    1 program: s_expr . EOL

    EOL  shift, and go to state 17


State 9

    2 s_expr: number .

    $default  reduce using rule 2 (s_expr)


State 10

    4 s_expr: f_expr .

    $default  reduce using rule 4 (s_expr)


State 11

   19 f_expr: LPAREN FUNC . s_expr_list RPAREN
   20       | LPAREN FUNC . RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    RPAREN  shift, and go to state 18
    QUIT    shift, and go to state 6

    s_expr       go to state 19
    number       go to state 9
    f_expr       go to state 10
    s_expr_list  go to state 20


State 12

   21 f_expr: LPAREN SYMBOL . s_expr_list RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr       go to state 19
    number       go to state 9
    f_expr       go to state 10
    s_expr_list  go to state 21


State 13

   11 let_section: LPAREN . let_list RPAREN

    LET  shift, and go to state 22

    let_list  go to state 23


State 14

    6 s_expr: LPAREN COND . s_expr s_expr s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 24
    number  go to state 9
    f_expr  go to state 10


State 15

    5 s_expr: LPAREN let_section . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 25
    number  go to state 9
    f_expr  go to state 10


State 16

    0 $accept: program $end .

    $default  accept


State 17

    1 program: s_expr EOL .

    $default  reduce using rule 1 (program)


State 18

   20 f_expr: LPAREN FUNC RPAREN .

    $default  reduce using rule 20 (f_expr)


State 19

   22 s_expr_list: s_expr . s_expr_list
   23            | s_expr .

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    RPAREN  reduce using rule 23 (s_expr_list)

    s_expr       go to state 19
    number       go to state 9
    f_expr       go to state 10
    s_expr_list  go to state 26


State 20

   19 f_expr: LPAREN FUNC s_expr_list . RPAREN

    RPAREN  shift, and go to state 27


State 21

   21 f_expr: LPAREN SYMBOL s_expr_list . RPAREN

    RPAREN  shift, and go to state 28


State 22

   12 let_list: LET . let_elem

    LPAREN  shift, and go to state 29

    let_elem  go to state 30


State 23

   11 let_section: LPAREN let_list . RPAREN
   13 let_list: let_list . let_elem

    LPAREN  shift, and go to state 29
    RPAREN  shift, and go to state 31

    let_elem  go to state 32


State 24

    6 s_expr: LPAREN COND s_expr . s_expr s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 33
    number  go to state 9
    f_expr  go to state 10


State 25

    5 s_expr: LPAREN let_section s_expr . RPAREN

    RPAREN  shift, and go to state 34


State 26

   22 s_expr_list: s_expr s_expr_list .

    $default  reduce using rule 22 (s_expr_list)


State 27

   19 f_expr: LPAREN FUNC s_expr_list RPAREN .

    $default  reduce using rule 19 (f_expr)


State 28

   21 f_expr: LPAREN SYMBOL s_expr_list RPAREN .

    $default  reduce using rule 21 (f_expr)


State 29

   14 let_elem: LPAREN . type SYMBOL s_expr RPAREN
   15         | LPAREN . type SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    INT_T     shift, and go to state 35
    DOUBLE_T  shift, and go to state 36

    $default  reduce using rule 18 (type)

    type  go to state 37


State 30

   12 let_list: LET let_elem .

    $default  reduce using rule 12 (let_list)


State 31

   11 let_section: LPAREN let_list RPAREN .

    $default  reduce using rule 11 (let_section)


State 32

   13 let_list: let_list let_elem .

    $default  reduce using rule 13 (let_list)


State 33

    6 s_expr: LPAREN COND s_expr s_expr . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 38
    number  go to state 9
    f_expr  go to state 10


State 34

    5 s_expr: LPAREN let_section s_expr RPAREN .

    $default  reduce using rule 5 (s_expr)


State 35

   16 type: INT_T .

    $default  reduce using rule 16 (type)


State 36

   17 type: DOUBLE_T .

    $default  reduce using rule 17 (type)


State 37

   14 let_elem: LPAREN type . SYMBOL s_expr RPAREN
   15         | LPAREN type . SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    SYMBOL  shift, and go to state 39


State 38

    6 s_expr: LPAREN COND s_expr s_expr s_expr . RPAREN

    RPAREN  shift, and go to state 40


State 39

   14 let_elem: LPAREN type SYMBOL . s_expr RPAREN
   15         | LPAREN type SYMBOL . LAMBDA LPAREN arg_list RPAREN s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6
    LAMBDA  shift, and go to state 41

    s_expr  go to state 42
    number  go to state 9
    f_expr  go to state 10


State 40

    6 s_expr: LPAREN COND s_expr s_expr s_expr RPAREN .

    $default  reduce using rule 6 (s_expr)


State 41

   15 let_elem: LPAREN type SYMBOL LAMBDA . LPAREN arg_list RPAREN s_expr RPAREN

    LPAREN  shift, and go to state 43


State 42

   14 let_elem: LPAREN type SYMBOL s_expr . RPAREN

    RPAREN  shift, and go to state 44


State 43

   15 let_elem: LPAREN type SYMBOL LAMBDA LPAREN . arg_list RPAREN s_expr RPAREN

    SYMBOL  shift, and go to state 45

    arg_list  go to state 46


State 44

   14 let_elem: LPAREN type SYMBOL s_expr RPAREN .

    $default  reduce using rule 14 (let_elem)


State 45

   24 arg_list: SYMBOL . arg_list
   25         | SYMBOL .

    SYMBOL  shift, and go to state 45

    $default  reduce using rule 25 (arg_list)

    arg_list  go to state 47


State 46

   15 let_elem: LPAREN type SYMBOL LAMBDA LPAREN arg_list . RPAREN s_expr RPAREN

    RPAREN  shift, and go to state 48


State 47

   24 arg_list: SYMBOL arg_list .

    $default  reduce using rule 24 (arg_list)


State 48

   15 let_elem: LPAREN type SYMBOL LAMBDA LPAREN arg_list RPAREN . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 49
    number  go to state 9
    f_expr  go to state 10


State 49

   15 let_elem: LPAREN type SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr . RPAREN

    RPAREN  shift, and go to state 50


State 50

   15 let_elem: LPAREN type SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN .

    $default  reduce using rule 15 (let_elem)
