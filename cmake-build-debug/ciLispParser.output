Grammar

    0 $accept: program $end

    1 program: s_expr EOL

    2 s_expr: number
    3       | SYMBOL
    4       | f_expr
    5       | LPAREN let_section s_expr RPAREN
    6       | LPAREN COND s_expr s_expr s_expr RPAREN
    7       | QUIT
    8       | error

    9 number: INT
   10       | DOUBLE

   11 let_section: LPAREN let_list RPAREN

   12 let_list: LET let_elem
   13         | let_list let_elem

   14 let_elem: LPAREN type SYMBOL s_expr RPAREN

   15 type: INT_T
   16     | DOUBLE_T
   17     | %empty

   18 f_expr: LPAREN FUNC s_expr_list RPAREN
   19       | LPAREN FUNC RPAREN

   20 s_expr_list: s_expr s_expr_list
   21            | s_expr


Terminals, with rules where they appear

$end (0) 0
error (256) 8
FUNC (258) 18 19
SYMBOL (259) 3 14
INT (260) 9
DOUBLE (261) 10
INT_T (262) 15
DOUBLE_T (263) 16
LET (264) 12
LPAREN (265) 5 6 11 14 18 19
RPAREN (266) 5 6 11 14 18 19
EOL (267) 1
QUIT (268) 7
COND (269) 6


Nonterminals, with rules where they appear

$accept (15)
    on left: 0
program (16)
    on left: 1, on right: 0
s_expr (17)
    on left: 2 3 4 5 6 7 8, on right: 1 5 6 14 20 21
number (18)
    on left: 9 10, on right: 2
let_section (19)
    on left: 11, on right: 5
let_list (20)
    on left: 12 13, on right: 11 13
let_elem (21)
    on left: 14, on right: 12 13
type (22)
    on left: 15 16 17, on right: 14
f_expr (23)
    on left: 18 19, on right: 4
s_expr_list (24)
    on left: 20 21, on right: 18 20


State 0

    0 $accept: . program $end

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    program  go to state 7
    s_expr   go to state 8
    number   go to state 9
    f_expr   go to state 10


State 1

    8 s_expr: error .

    $default  reduce using rule 8 (s_expr)


State 2

    3 s_expr: SYMBOL .

    $default  reduce using rule 3 (s_expr)


State 3

    9 number: INT .

    $default  reduce using rule 9 (number)


State 4

   10 number: DOUBLE .

    $default  reduce using rule 10 (number)


State 5

    5 s_expr: LPAREN . let_section s_expr RPAREN
    6       | LPAREN . COND s_expr s_expr s_expr RPAREN
   18 f_expr: LPAREN . FUNC s_expr_list RPAREN
   19       | LPAREN . FUNC RPAREN

    FUNC    shift, and go to state 11
    LPAREN  shift, and go to state 12
    COND    shift, and go to state 13

    let_section  go to state 14


State 6

    7 s_expr: QUIT .

    $default  reduce using rule 7 (s_expr)


State 7

    0 $accept: program . $end

    $end  shift, and go to state 15


State 8

    1 program: s_expr . EOL

    EOL  shift, and go to state 16


State 9

    2 s_expr: number .

    $default  reduce using rule 2 (s_expr)


State 10

    4 s_expr: f_expr .

    $default  reduce using rule 4 (s_expr)


State 11

   18 f_expr: LPAREN FUNC . s_expr_list RPAREN
   19       | LPAREN FUNC . RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    RPAREN  shift, and go to state 17
    QUIT    shift, and go to state 6

    s_expr       go to state 18
    number       go to state 9
    f_expr       go to state 10
    s_expr_list  go to state 19


State 12

   11 let_section: LPAREN . let_list RPAREN

    LET  shift, and go to state 20

    let_list  go to state 21


State 13

    6 s_expr: LPAREN COND . s_expr s_expr s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 22
    number  go to state 9
    f_expr  go to state 10


State 14

    5 s_expr: LPAREN let_section . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 23
    number  go to state 9
    f_expr  go to state 10


State 15

    0 $accept: program $end .

    $default  accept


State 16

    1 program: s_expr EOL .

    $default  reduce using rule 1 (program)


State 17

   19 f_expr: LPAREN FUNC RPAREN .

    $default  reduce using rule 19 (f_expr)


State 18

   20 s_expr_list: s_expr . s_expr_list
   21            | s_expr .

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    RPAREN  reduce using rule 21 (s_expr_list)

    s_expr       go to state 18
    number       go to state 9
    f_expr       go to state 10
    s_expr_list  go to state 24


State 19

   18 f_expr: LPAREN FUNC s_expr_list . RPAREN

    RPAREN  shift, and go to state 25


State 20

   12 let_list: LET . let_elem

    LPAREN  shift, and go to state 26

    let_elem  go to state 27


State 21

   11 let_section: LPAREN let_list . RPAREN
   13 let_list: let_list . let_elem

    LPAREN  shift, and go to state 26
    RPAREN  shift, and go to state 28

    let_elem  go to state 29


State 22

    6 s_expr: LPAREN COND s_expr . s_expr s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 30
    number  go to state 9
    f_expr  go to state 10


State 23

    5 s_expr: LPAREN let_section s_expr . RPAREN

    RPAREN  shift, and go to state 31


State 24

   20 s_expr_list: s_expr s_expr_list .

    $default  reduce using rule 20 (s_expr_list)


State 25

   18 f_expr: LPAREN FUNC s_expr_list RPAREN .

    $default  reduce using rule 18 (f_expr)


State 26

   14 let_elem: LPAREN . type SYMBOL s_expr RPAREN

    INT_T     shift, and go to state 32
    DOUBLE_T  shift, and go to state 33

    $default  reduce using rule 17 (type)

    type  go to state 34


State 27

   12 let_list: LET let_elem .

    $default  reduce using rule 12 (let_list)


State 28

   11 let_section: LPAREN let_list RPAREN .

    $default  reduce using rule 11 (let_section)


State 29

   13 let_list: let_list let_elem .

    $default  reduce using rule 13 (let_list)


State 30

    6 s_expr: LPAREN COND s_expr s_expr . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 35
    number  go to state 9
    f_expr  go to state 10


State 31

    5 s_expr: LPAREN let_section s_expr RPAREN .

    $default  reduce using rule 5 (s_expr)


State 32

   15 type: INT_T .

    $default  reduce using rule 15 (type)


State 33

   16 type: DOUBLE_T .

    $default  reduce using rule 16 (type)


State 34

   14 let_elem: LPAREN type . SYMBOL s_expr RPAREN

    SYMBOL  shift, and go to state 36


State 35

    6 s_expr: LPAREN COND s_expr s_expr s_expr . RPAREN

    RPAREN  shift, and go to state 37


State 36

   14 let_elem: LPAREN type SYMBOL . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 38
    number  go to state 9
    f_expr  go to state 10


State 37

    6 s_expr: LPAREN COND s_expr s_expr s_expr RPAREN .

    $default  reduce using rule 6 (s_expr)


State 38

   14 let_elem: LPAREN type SYMBOL s_expr . RPAREN

    RPAREN  shift, and go to state 39


State 39

   14 let_elem: LPAREN type SYMBOL s_expr RPAREN .

    $default  reduce using rule 14 (let_elem)
