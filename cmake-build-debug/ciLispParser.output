Grammar

    0 $accept: program $end

    1 program: s_expr EOL

    2 s_expr: number
    3       | SYMBOL
    4       | f_expr
    5       | LPAREN let_section s_expr RPAREN
    6       | QUIT
    7       | error

    8 number: INT
    9       | DOUBLE

   10 let_section: LPAREN let_list RPAREN

   11 let_list: LET let_elem
   12         | let_list let_elem

   13 let_elem: LPAREN SYMBOL s_expr RPAREN

   14 f_expr: LPAREN FUNC s_expr RPAREN
   15       | LPAREN FUNC s_expr s_expr RPAREN


Terminals, with rules where they appear

$end (0) 0
error (256) 7
FUNC (258) 14 15
SYMBOL (259) 3 13
INT (260) 8
DOUBLE (261) 9
LET (262) 11
LPAREN (263) 5 10 13 14 15
RPAREN (264) 5 10 13 14 15
EOL (265) 1
QUIT (266) 6


Nonterminals, with rules where they appear

$accept (12)
    on left: 0
program (13)
    on left: 1, on right: 0
s_expr (14)
    on left: 2 3 4 5 6 7, on right: 1 5 13 14 15
number (15)
    on left: 8 9, on right: 2
let_section (16)
    on left: 10, on right: 5
let_list (17)
    on left: 11 12, on right: 10 12
let_elem (18)
    on left: 13, on right: 11 12
f_expr (19)
    on left: 14 15, on right: 4


state 0

    0 $accept: . program $end

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    program  go to state 7
    s_expr   go to state 8
    number   go to state 9
    f_expr   go to state 10


state 1

    7 s_expr: error .

    $default  reduce using rule 7 (s_expr)


state 2

    3 s_expr: SYMBOL .

    $default  reduce using rule 3 (s_expr)


state 3

    8 number: INT .

    $default  reduce using rule 8 (number)


state 4

    9 number: DOUBLE .

    $default  reduce using rule 9 (number)


state 5

    5 s_expr: LPAREN . let_section s_expr RPAREN
   14 f_expr: LPAREN . FUNC s_expr RPAREN
   15       | LPAREN . FUNC s_expr s_expr RPAREN

    FUNC    shift, and go to state 11
    LPAREN  shift, and go to state 12

    let_section  go to state 13


state 6

    6 s_expr: QUIT .

    $default  reduce using rule 6 (s_expr)


state 7

    0 $accept: program . $end

    $end  shift, and go to state 14


state 8

    1 program: s_expr . EOL

    EOL  shift, and go to state 15


state 9

    2 s_expr: number .

    $default  reduce using rule 2 (s_expr)


state 10

    4 s_expr: f_expr .

    $default  reduce using rule 4 (s_expr)


state 11

   14 f_expr: LPAREN FUNC . s_expr RPAREN
   15       | LPAREN FUNC . s_expr s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 16
    number  go to state 9
    f_expr  go to state 10


state 12

   10 let_section: LPAREN . let_list RPAREN

    LET  shift, and go to state 17

    let_list  go to state 18


state 13

    5 s_expr: LPAREN let_section . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 19
    number  go to state 9
    f_expr  go to state 10


state 14

    0 $accept: program $end .

    $default  accept


state 15

    1 program: s_expr EOL .

    $default  reduce using rule 1 (program)


state 16

   14 f_expr: LPAREN FUNC s_expr . RPAREN
   15       | LPAREN FUNC s_expr . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    RPAREN  shift, and go to state 20
    QUIT    shift, and go to state 6

    s_expr  go to state 21
    number  go to state 9
    f_expr  go to state 10


state 17

   11 let_list: LET . let_elem

    LPAREN  shift, and go to state 22

    let_elem  go to state 23


state 18

   10 let_section: LPAREN let_list . RPAREN
   12 let_list: let_list . let_elem

    LPAREN  shift, and go to state 22
    RPAREN  shift, and go to state 24

    let_elem  go to state 25


state 19

    5 s_expr: LPAREN let_section s_expr . RPAREN

    RPAREN  shift, and go to state 26


state 20

   14 f_expr: LPAREN FUNC s_expr RPAREN .

    $default  reduce using rule 14 (f_expr)


state 21

   15 f_expr: LPAREN FUNC s_expr s_expr . RPAREN

    RPAREN  shift, and go to state 27


state 22

   13 let_elem: LPAREN . SYMBOL s_expr RPAREN

    SYMBOL  shift, and go to state 28


state 23

   11 let_list: LET let_elem .

    $default  reduce using rule 11 (let_list)


state 24

   10 let_section: LPAREN let_list RPAREN .

    $default  reduce using rule 10 (let_section)


state 25

   12 let_list: let_list let_elem .

    $default  reduce using rule 12 (let_list)


state 26

    5 s_expr: LPAREN let_section s_expr RPAREN .

    $default  reduce using rule 5 (s_expr)


state 27

   15 f_expr: LPAREN FUNC s_expr s_expr RPAREN .

    $default  reduce using rule 15 (f_expr)


state 28

   13 let_elem: LPAREN SYMBOL . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 29
    number  go to state 9
    f_expr  go to state 10


state 29

   13 let_elem: LPAREN SYMBOL s_expr . RPAREN

    RPAREN  shift, and go to state 30


state 30

   13 let_elem: LPAREN SYMBOL s_expr RPAREN .

    $default  reduce using rule 13 (let_elem)
