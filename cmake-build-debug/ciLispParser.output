Grammar

    0 $accept: program $end

    1 program: s_expr EOL

    2 s_expr: number
    3       | SYMBOL
    4       | f_expr
    5       | LPAREN let_section s_expr RPAREN
    6       | QUIT
    7       | error

    8 number: INT
    9       | DOUBLE

   10 let_section: LPAREN let_list RPAREN

   11 let_list: LET let_elem
   12         | let_list let_elem

   13 let_elem: LPAREN type SYMBOL s_expr RPAREN

   14 type: INT_T
   15     | DOUBLE_T
   16     | %empty

   17 f_expr: LPAREN FUNC s_expr_list RPAREN
   18       | LPAREN FUNC RPAREN

   19 s_expr_list: s_expr s_expr_list
   20            | s_expr


Terminals, with rules where they appear

$end (0) 0
error (256) 7
FUNC (258) 17 18
SYMBOL (259) 3 13
INT (260) 8
DOUBLE (261) 9
INT_T (262) 14
DOUBLE_T (263) 15
LET (264) 11
LPAREN (265) 5 10 13 17 18
RPAREN (266) 5 10 13 17 18
EOL (267) 1
QUIT (268) 6


Nonterminals, with rules where they appear

$accept (14)
    on left: 0
program (15)
    on left: 1, on right: 0
s_expr (16)
    on left: 2 3 4 5 6 7, on right: 1 5 13 19 20
number (17)
    on left: 8 9, on right: 2
let_section (18)
    on left: 10, on right: 5
let_list (19)
    on left: 11 12, on right: 10 12
let_elem (20)
    on left: 13, on right: 11 12
type (21)
    on left: 14 15 16, on right: 13
f_expr (22)
    on left: 17 18, on right: 4
s_expr_list (23)
    on left: 19 20, on right: 17 19


State 0

    0 $accept: . program $end

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    program  go to state 7
    s_expr   go to state 8
    number   go to state 9
    f_expr   go to state 10


State 1

    7 s_expr: error .

    $default  reduce using rule 7 (s_expr)


State 2

    3 s_expr: SYMBOL .

    $default  reduce using rule 3 (s_expr)


State 3

    8 number: INT .

    $default  reduce using rule 8 (number)


State 4

    9 number: DOUBLE .

    $default  reduce using rule 9 (number)


State 5

    5 s_expr: LPAREN . let_section s_expr RPAREN
   17 f_expr: LPAREN . FUNC s_expr_list RPAREN
   18       | LPAREN . FUNC RPAREN

    FUNC    shift, and go to state 11
    LPAREN  shift, and go to state 12

    let_section  go to state 13


State 6

    6 s_expr: QUIT .

    $default  reduce using rule 6 (s_expr)


State 7

    0 $accept: program . $end

    $end  shift, and go to state 14


State 8

    1 program: s_expr . EOL

    EOL  shift, and go to state 15


State 9

    2 s_expr: number .

    $default  reduce using rule 2 (s_expr)


State 10

    4 s_expr: f_expr .

    $default  reduce using rule 4 (s_expr)


State 11

   17 f_expr: LPAREN FUNC . s_expr_list RPAREN
   18       | LPAREN FUNC . RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    RPAREN  shift, and go to state 16
    QUIT    shift, and go to state 6

    s_expr       go to state 17
    number       go to state 9
    f_expr       go to state 10
    s_expr_list  go to state 18


State 12

   10 let_section: LPAREN . let_list RPAREN

    LET  shift, and go to state 19

    let_list  go to state 20


State 13

    5 s_expr: LPAREN let_section . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 21
    number  go to state 9
    f_expr  go to state 10


State 14

    0 $accept: program $end .

    $default  accept


State 15

    1 program: s_expr EOL .

    $default  reduce using rule 1 (program)


State 16

   18 f_expr: LPAREN FUNC RPAREN .

    $default  reduce using rule 18 (f_expr)


State 17

   19 s_expr_list: s_expr . s_expr_list
   20            | s_expr .

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    RPAREN  reduce using rule 20 (s_expr_list)

    s_expr       go to state 17
    number       go to state 9
    f_expr       go to state 10
    s_expr_list  go to state 22


State 18

   17 f_expr: LPAREN FUNC s_expr_list . RPAREN

    RPAREN  shift, and go to state 23


State 19

   11 let_list: LET . let_elem

    LPAREN  shift, and go to state 24

    let_elem  go to state 25


State 20

   10 let_section: LPAREN let_list . RPAREN
   12 let_list: let_list . let_elem

    LPAREN  shift, and go to state 24
    RPAREN  shift, and go to state 26

    let_elem  go to state 27


State 21

    5 s_expr: LPAREN let_section s_expr . RPAREN

    RPAREN  shift, and go to state 28


State 22

   19 s_expr_list: s_expr s_expr_list .

    $default  reduce using rule 19 (s_expr_list)


State 23

   17 f_expr: LPAREN FUNC s_expr_list RPAREN .

    $default  reduce using rule 17 (f_expr)


State 24

   13 let_elem: LPAREN . type SYMBOL s_expr RPAREN

    INT_T     shift, and go to state 29
    DOUBLE_T  shift, and go to state 30

    $default  reduce using rule 16 (type)

    type  go to state 31


State 25

   11 let_list: LET let_elem .

    $default  reduce using rule 11 (let_list)


State 26

   10 let_section: LPAREN let_list RPAREN .

    $default  reduce using rule 10 (let_section)


State 27

   12 let_list: let_list let_elem .

    $default  reduce using rule 12 (let_list)


State 28

    5 s_expr: LPAREN let_section s_expr RPAREN .

    $default  reduce using rule 5 (s_expr)


State 29

   14 type: INT_T .

    $default  reduce using rule 14 (type)


State 30

   15 type: DOUBLE_T .

    $default  reduce using rule 15 (type)


State 31

   13 let_elem: LPAREN type . SYMBOL s_expr RPAREN

    SYMBOL  shift, and go to state 32


State 32

   13 let_elem: LPAREN type SYMBOL . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 33
    number  go to state 9
    f_expr  go to state 10


State 33

   13 let_elem: LPAREN type SYMBOL s_expr . RPAREN

    RPAREN  shift, and go to state 34


State 34

   13 let_elem: LPAREN type SYMBOL s_expr RPAREN .

    $default  reduce using rule 13 (let_elem)
